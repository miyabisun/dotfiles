" linter
" let g:ale_fixers = {
" \   'javascript': ['eslint'],
" \}
" let g:ale_lint_on_enter = 1
" let g:ale_fix_on_save = 1
" let g:ale_completion_enabled = 1
" let g:ale_sign_column_always = 1
" let g:ale_ignore_2_4_warnings = 1
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Language Settings
" livescript

" markdown
augroup markdownPreviewSetting
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  let g:previm_open_cmd = 'open -a "Google Chrome"'
  let g:vim_markdown_folding_disabled=1
augroup END

" pug
let g:syntastic_pug_checkers = ['pug_lint']

" vim-go
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
let g:go_fmt_command = "goimports"

" clojure
let g:iced_enable_default_key_mappings = v:true
" let g:syntastic_clojure_checkers = ['eastwood']
" let g:sexp_enable_insert_mode_mappings = 0
" let g:clojure_fuzzy_indent_patterns = ['with-let', 'are']
" let g:iced_enable_auto_linting = v:true
" let g:iced#format#rule = {
  " \ 'are': '[[:block 2] [:inner 2 0]]',
  " \ 'r/with-let': '[[:block 2] [:inner 2 0]]',
  " \ 'clojure.test/are': '[[:block 2] [:inner 2 0]]',
" \ }
function! s:isClojure()
  let shebang = getline(1)
  if shebang =~# '^#!.*/bin/env\s\+bb\>' | return 1 | en
  return 0
endfunction
augroup clojureSyntax
  autocmd!
  autocmd BufRead,BufNewFile * if s:isClojure() | set filetype=clojure | en
augroup END

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" open-browser
nmap zx <Plug>(openbrowser-smart-search)
vmap zx <Plug>(openbrowser-smart-search)
