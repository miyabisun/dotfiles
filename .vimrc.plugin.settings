" submode
call submode#enter_with('bufmove', 'n', '', 'z>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 'z<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 'z+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 'z-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')

" linter
let g:ale_fixers = {
\   'javascript': ['eslint'],
\}
let g:ale_lint_on_enter = 1
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" others
command! UniDecode %s/\\u\([0-9a-f]\{4}\)/\=nr2char(eval("0x".submatch(1)),1)/g

" Language Settings
" livescript
function! s:isLiveScript()
  let shebang = getline(1)
  if shebang =~# '^#!.*/bin/env\s\+lsc\>' | return 1 | en
  return 0
endfunction
augroup livescriptSyntax
  autocmd!
  autocmd BufRead,BufNewFile * if s:isLiveScript() | set filetype=ls | en
augroup END

" markdown
augroup markdownPreviewSetting
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  let g:previm_open_cmd = 'open -a "Google Chrome"'
  let g:vim_markdown_folding_disabled=1
augroup END

" pug
let g:syntastic_pug_checkers = ['pug_lint']

" vim-go
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
let g:go_fmt_command = "goimports"

" clojure
let g:clojure_fuzzy_indent_patterns = ['^are$']
let g:iced_enable_default_key_mappings = v:true
let g:iced#format#rule = {
  \ 'are': '[[:block 2] [:inner 2 0]]',
  \ 'clojure.test/are': '[[:block 2] [:inner 2 0]]',
\ }
